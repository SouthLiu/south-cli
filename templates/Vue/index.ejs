<template>
  <BasicContent v-if="pagePermission.page">
<% if (funcs.includes('search')) { -%>
    <template #top>
      <BasicSearch
        :list="searchList"
        :data="searches.data"
        :loading="loading"
<% if (funcs.includes('create')) { -%>
        :isCreate="pagePermission.create"
        @onCreate="onCreate"
<% } -%>
        @handleFinish="handleSearch"
      />
    </template>

<% } -%>
<% if (funcs.includes('create') || funcs.includes('delete')) { -%>
    <BasicTable
      :data="tables"
      :columns="tableColumns"
      :loading="loading"
    >
      <template v-slot:operate='row'>
<% if (funcs.includes('create')) { -%>
        <UpdateBtn
          v-if="pagePermission.update"
          class="mr-2"
          :loading="createLoading"
          @click="onUpdate(row.record)"
        />
<% } -%>
<% if (funcs.includes('delete')) { -%>
        <DeleteBtn
          v-if="pagePermission.delete"
          :loading="loading"
          @click="handleDelete(row.record.id)"
        />
<% } -%>
      </template>
    </BasicTable>
<% } else { -%>
    <BasicTable
      :data="tables"
      :columns="tableColumns"
      :loading="loading"
    />
<% } -%>
<% if (funcs.includes('pagination')) { -%>

    <template #footer>
      <BasicPagination
        :page="pagination.page"
        :pageSize="pagination.pageSize"
        :total="tables.total"
        :loading="loading"
        @handleChange="handlePagination"
      />
    </template>
<% } -%>
  </BasicContent>
<% if (funcs.includes('create')) { -%>

  <BasicModal
    v-model:visible="creates.visible"
    :loading="createLoading"
    :title="creates.title"
    @handleFinish="createSubmit"
    @handleCancel="onCloseCreate"
  >
    <BasicForm
      ref="createFormRef"
      :list="createList"
      :labelCol="{ span: 6 }"
      :data="creates.data"
      @handleFinish="handleCreate"
    />
  </BasicModal>
<% } -%>
</template>

<%- '<script lang="ts" setup>' %>
<% if (funcs.includes('create') || funcs.includes('search')) { -%>
import type { IFormData } from '#/form'
<% } -%>
<% if (funcs.includes('create')) { -%>
import type { IBasicForm } from '@/components/Form/model'
<% } -%>
import type { <% if (funcs.includes('create')) { -%>ICreateData, <% } -%>
<% if (funcs.includes('search')) { -%>ISearchData, <% } -%>ITableData, IPaginationData } from '#/global'
<% if (funcs.includes('create') || funcs.includes('update') || funcs.includes('delete')) { -%>
import { message } from 'ant-design-vue'
<% } -%>
import { <% if (funcs.includes('search')) { -%>onMounted, <% } -%>reactive<% if (funcs.includes('create') || funcs.includes('update')) { -%>, ref<% } -%> } from 'vue'
<% if (funcs.includes('update') || funcs.includes('delete')) { -%>
import {<% if (funcs.includes('update')) { -%> UpdateBtn<% } -%>
<% if (funcs.includes('delete')) { -%>, DeleteBtn<% } -%> } from '@/components/Buttons'
<% } -%>
<% if (funcs.includes('create')) { -%>
import { ADD_TITLE, EDIT_TITLE } from '@/utils/config'
<% } -%>
import { <% if (funcs.includes('search')) { -%>searchList, <% } -%>
<% if (funcs.includes('create') || funcs.includes('update')) { -%>createList, <% } -%>
tableColumns } from './data'
import { useLoading } from '@/hooks/useLoading'
<% if (funcs.includes('create')) { -%>
import { useCreateLoading } from '@/hooks/useCreateLoading'
<% } -%>
import { checkPermission } from '@/utils/permissions'
import { useUserStore } from '@/stores/user'
import { storeToRefs } from 'pinia'
<% if (funcs.includes('create') && funcs.includes('update') && funcs.includes('delete')) { -%>
import {
  get<%=name%>Page<% if (funcs.includes('update')) { %>,
  get<%=name%>ById<% } -%><% if (funcs.includes('create')) { %>,
  create<%=name%><% } -%><% if (funcs.includes('update')) { %>,
  update<%=name%><% } -%><% if (funcs.includes('delete')) { %>,
  delete<%=name%><% } %>
} from './<%=apiName%>'
<% } else { -%>
import { get<%=name%>Page<% if (funcs.includes('update')) { -%>, get<%=name%>ById<% } -%>
<% if (funcs.includes('create')) { -%>, create<%=name%><% } -%>
<% if (funcs.includes('update')) { -%>, update<%=name%><% } -%>
<% if (funcs.includes('delete')) { -%>, delete<%=name%><% } -%> } from './<%=apiName%>'
<% } -%>
import BasicContent from '@/components/Content/BasicContent.vue'
import BasicTable from '@/components/Table/BasicTable.vue'
<% if (funcs.includes('pagination')) { -%>
import BasicPagination from '@/components/Pagination/BasicPagination.vue'
<% } -%>
<% if (funcs.includes('search')) { -%>
import BasicSearch from '@/components/Search/BasicSearch.vue'
<% } -%>
<% if (funcs.includes('create')) { -%>
import BasicForm from '@/components/Form/BasicForm.vue'
import BasicModal from '@/components/Modal/BasicModal.vue'
<% } -%>

<% if (funcs.includes('create') || funcs.includes('update')) { -%>
const createFormRef = ref<IBasicForm>()
<% } -%>
const userStore = useUserStore()
const { permissions } = storeToRefs(userStore)
const { loading, startLoading, endLoading } = useLoading()
<% if (funcs.includes('create') || funcs.includes('update')) { -%>
const { createLoading, startCreateLoading, endCreateLoading } = useCreateLoading()
<% } -%>

// 权限前缀
const permissionPrefix = '<%=rule%>'

// 权限
const pagePermission = reactive({
  page: checkPermission(`${permissionPrefix}/index`, permissions.value),
<% if (funcs.includes('create')) { -%>
  create: checkPermission(`${permissionPrefix}/create`, permissions.value),
<% } -%>
<% if (funcs.includes('update')) { -%>
  update: checkPermission(`${permissionPrefix}/update`, permissions.value),
<% } -%>
<% if (funcs.includes('delete')) { -%>
  delete: checkPermission(`${permissionPrefix}/delete`, permissions.value)
<% } -%>
})
<% if (funcs.includes('create') || funcs.includes('update')) { -%>

// 初始化新增数据
const initCreate = {
  status: 1,
  module: 'authority'
}
<% } -%>
<% if (funcs.includes('search')) { -%>

// 搜索数据
const searches = reactive<ISearchData>({
  data: {}
})
<% } -%>
<% if (funcs.includes('create') || funcs.includes('update')) { -%>

// 新增数据
const creates = reactive<ICreateData>({
  id: '',
  visible: false,
  title: '新增',
  data: initCreate
})
<% } -%>

// 表格数据
const tables = reactive<ITableData>({
  total: 0,
  data: []
})

<% if (funcs.includes('pagination')) { -%>
// 分页数据
const pagination = reactive<IPaginationData>({
  page: 1,
  pageSize: 20,
})

<% } -%>
<% if (funcs.includes('search')) { -%>
onMounted(() => {
  getPage()
})

/**
  * 获取表格数据
  */
const getPage = async () => {
  handleSearch(searches.data)
}

<% } -%>
<% if (funcs.includes('create') || funcs.includes('update')) { -%>
/** 表格提交 */
const createSubmit = () => {
  createFormRef.value?.handleSubmit()
}

<% } -%>
<% if (funcs.includes('search')) { -%>
/**
  * 搜索提交
  * @param values - 表单返回数据
  */
const handleSearch = async (values: IFormData) => {
  searches.data = values
  const query = { ...pagination, ...values }
  try {
    startLoading()
    const { data: { data } } = await get<%=name%>Page(query)
    const { items, total } = data
    tables.data = items
    tables.total = total
  } finally {
    endLoading()
  }
}
<% } -%>
<% if (funcs.includes('create')) { -%>

/** 点击新增 */
const onCreate = () => {
  creates.visible = !creates.visible
  creates.title = ADD_TITLE
  creates.id = ''
  creates.data = initCreate
}
<% } -%>
<% if (funcs.includes('update')) { -%>

/**
  * 点击编辑
  * @param record - 当前行数据
  */
const onUpdate = async (record: IFormData) => {
  const { id, name } = record
  creates.visible = !creates.visible
  creates.id = id as string
  creates.title = EDIT_TITLE(name as string)

  try {
    startCreateLoading()
    const { data: { data } } = await get<%=name%>ById(id as string)
    creates.data = data
  } finally {
    endCreateLoading()
  }
}
<% } -%>
<% if (funcs.includes('create') || funcs.includes('update')) { -%>

/**
  * 新增/编辑提交
  * @param values - 表单返回数据
  */
const handleCreate = async (values: IFormData) => {
  try {
    startCreateLoading()
    const functions = () => creates.id ? update<%=name%>(creates.id, values) : create<%=name%>(values)
    const { data } = await functions()
    getPage()
    creates.id = ''
    creates.visible = false
    creates.data = initCreate
    createFormRef.value?.handleReset()
    message.success(data?.message || '操作成功')
  } finally {
    endCreateLoading()
  }
}

/** 关闭新增/编辑 */
const onCloseCreate = () => {
  creates.visible = false
}

<% } -%>
<% if (funcs.includes('delete')) { -%>
/**
  * 删除
  * @param id
  */
const handleDelete = async (id: string | number) => {
  try {
    startLoading()
    const { data } = await delete<%=name%>(id as string)
    if (data?.code === 200) {
      message.success(data?.message || '删除成功')
      getPage()
    }
  } finally {
    endLoading()
  }
}

<% } -%>
<% if (funcs.includes('pagination')) { -%>
/**
  * 分页
  * @param page - 当前页
  * @param pageSize - 分页总数
  */
const handlePagination = (page: number, pageSize: number) => {
  pagination.page = page
  pagination.pageSize = pageSize
  getPage()
}
<% } -%>
<%- '</script>' %>
