import { useCallback, useEffect<% if (funcs.includes('batchDelete')) { %>, useState<% } %> } from 'react'
<% if (funcs.includes('search')) { -%>
import Searchs from '@/components/Searchs'
<% } -%>
<% if (funcs.includes('pagination')) { -%>
import Paginations from '@/components/Paginations'
<% } -%>
<% if (funcs.includes('create')) { -%>
import Create from '@/components/Create'
<% } -%>
import { connect } from 'dva'
import { ColumnsType } from 'antd/es/table'
<% if (funcs.includes('create') || funcs.includes('delete') || funcs.includes('batchDelete')) { -%>
import { Popconfirm, Tooltip<% if (funcs.includes('batchDelete')) { %>, Button, message'<% } %> } from 'antd'
<% } -%>
import { initData } from '@/utils/initData'
import { IAuthorityLoginState, <%= modelInterface %> } from '@/models'
import checkPermission from '@/utils/permission'
import { useTitleHook } from '@/hooks'
import Tables from '@/components/Tables'
import { DISABLED_ENABLE } from '@/utils/constant'
import { findMapColor, findMapValue } from '@/utils/filter'

type IProps = {
  data: any;
  status: <%= modelInterface %>;
  loginStatus: IAuthorityLoginState;
} & IPublic
<% if (funcs.includes('create') || funcs.includes('update')) { -%>
const CreateLayout = {
  labelCol: { span: 6 },
  wrapperCol: { span: 18 },
};
<% } -%>

function Page(props: IProps) {
  useTitleHook('<%= title %>');
  const {
    dispatch,
    status,
    loginStatus,
    isLoading,
<% if (funcs.includes('create') || funcs.includes('update')) { -%>
    isCreateLoading,
<% } -%>
  } = props;
  const {
<% if (funcs.includes('create')) { -%>
    isCreate,
<% } -%>
<% if (funcs.includes('update')) { -%>
    updateId,
<% } -%>
<% if (funcs.includes('pagination')) { -%>
    total,
<% } -%>
    data,
    query,
  } = status;
  let { initFormData } = status;
  const { permissions } = loginStatus;
<% if (funcs.includes('create') || funcs.includes('update')) { -%>
  const isNotCreateBtn: boolean = !checkPermission({ value: '<%= rule %>/create', permissions });
<% } -%>
<% if (funcs.includes('search')) { -%>
  const isNotSearchBtn: boolean = !checkPermission({ value: '<%= rule %>', permissions });
<% } -%>
<% if (funcs.includes('batchDelete')) { -%>
  const [selectIds, setSelectIds] = useState<React.Key[]>([]);
<% } -%>

  const defaultData: IDefaultData[] = [
    { label: 'ID', key: 'id', width: 120, isNotCreate: true },
    { label: '小程序appid', key: 'appid', width: 80, searchWidth: 240, type: 'string', isRequired: true, isSearch: true },
    { label: '状态', key: 'status', width: 130, searchWidth: 160, type: 'select', selectList: DISABLED_ENABLE, isSearch: true,
      render: (text, record) => (
        <%- '<span' %>
          style={{ color: findMapColor(text as string, DISABLED_ENABLE) }}
        >{ findMapValue(text as string, DISABLED_ENABLE)  }</span>
      )
    },
    { label: '版本号', key: 'version', width: 80, type: 'string' },
    { label: '创建日期', key: 'created_at', width: 140, type: 'string', isNotCreate: true },
    { label: '更新日期', key: 'updated_at', width: 140, type: 'string', isNotCreate: true },
<% if (funcs.includes('update') || funcs.includes('delete')) { -%>
    { label: '操作', key: 'operation', fixed: 'right', width: 70, isNotCreate: true, align: 'center',
      render: (text, record, index) => (
        <div className='options_box'>
<% if (funcs.includes('update')) { -%>
          {
            checkPermission({ value: '<%= rule %>/update', permissions }) &&
            <Tooltip title='修改'>
              <%- '<div' %>
                className='options_btn iconfont'
                onClick={() => handleUpdate(record.id)}
              >
                &#xe612;
              </div>
            </Tooltip>
          }
<% } -%>
<% if (funcs.includes('delete')) { -%>
          {
            checkPermission({ value: '<%= rule %>/delete', permissions }) &&
            <%- '<Popconfirm' %>
              title='确定删除?'
              cancelText='取消'
              okText='确定'
              onConfirm={() => handleDelete(record.id)}
            >
              <Tooltip title='删除'>
                <div
                  className={'options_btn iconfont'}
                >
                  &#xe60e;
                </div>
              </Tooltip>
            </Popconfirm>
          }
<% } -%>
        </div>
      ),
    },
<% } -%>
  ];
  const dates = initData(defaultData, initFormData);
  const columnLists: ColumnsType<IDefaultData> = dates.columns;
<% if (funcs.includes('update')) { -%>
  const createList = dates.createList;
<% } -%>
  const searchList = dates.searchList;
  initFormData = dates.initFormData;

  const handleGetPage = useCallback(() => {
    if (!isNotSearchBtn && data?.length === 0) {
      dispatch({
        type: '<%= model %>/handleGetPage',
        payload: query,
      });
    }
  }, [isNotSearchBtn]);

  useEffect(() => {
    handleGetPage();
  }, [handleGetPage]);
<% if (funcs.includes('search')) { -%>

  // 搜索
  const handleSearch = (values: any) => {
    query.page = 1;
    for (let key in values) {
      values.hasOwnProperty(key) && values[key] !== undefined && values[key] !== '' ? query[key] = values[key] : delete query[key];
    }
    dispatch({
      type: '<%= model %>/handleGetPage',
      payload: query,
    });
  };
<% } -%>
<% if (funcs.includes('create')) { -%>

  // 新增
  const handleClickCreate = () => {
    dispatch({
      type: '<%= model %>/handleChangeCreate',
      payload: {
        id: '',
        state: true
      },
    });
  };
<% } -%>
<% if (funcs.includes('update')) { -%>

  // 修改
  const handleUpdate = (id: string) => {
    dispatch({
      type: '<%= model %>/handleChangeUpdate',
      payload: {
        id,
        state: true
      },
    });
  };
<% } -%>
<% if (funcs.includes('create') || funcs.includes('update')) { -%>

  // 关闭新增/修改
  const handleCloseCreate = () => {
    dispatch({
      type: '<%= model %>/handleChangeCreate',
      payload: {
        id: '',
        state: false,
        initFormData: {},
      },
    });
  };

  // 提交表单
  const handleCreateSubmit = (values: Record<string, any>) => {
    if (updateId) {
      dispatch({
        type: '<%= model %>/handleUpdate',
        payload: {
          id: updateId,
          values,
          query,
        },
      });
    } else {
      dispatch({
        type: '<%= model %>/handleCreate',
        payload: {
          values,
          query,
        },
      });
    }
  };
<% } -%>
<% if (funcs.includes('delete')) { -%>

  // 删除
  const handleDelete = (id: string) => {
    dispatch({
      type: '<%= model %>/handleBatchDelete',
      payload: { id, query },
    });
  };
<% } -%>
<% if (funcs.includes('batchDelete')) { -%>

  // row选择
  const handleRowSelect = (selectedRowKeys: React.Key[], selectedRows: any[]) => {
    setSelectIds(selectedRowKeys);
  };

  // 批量删除
  const handleBatchDelete = () => {
    if (selectIds.length === 0) {
      return message.warning({ content: '请勾选!', key: 'check_please' });
    }
    dispatch({
      type: '<%= model %>/handleDelete',
      payload: { ids: selectIds, query },
    });
  };
<% } -%>
<% if (funcs.includes('pagination')) { -%>

  // 处理分页
  const handleChangePage = (page: number, pageSize?: number) => {
    query.page = page;
    query.pageSize = pageSize || 20;

    dispatch({
      type: '<%= model %>/handleGetPage',
      payload: query,
    });
  };
<% } -%>
<% if (funcs.includes('batchDelete')) { -%>

  // 搜索额外添加
  const addSearchElement = () => {
    return (
      <>
        {checkPermission({ value: '<%= rule %>/batch-delete', permissions }) && (
          <Popconfirm
            title="确定批量删除?"
            cancelText="取消"
            okText="确定"
            onConfirm={handleBatchDelete}
          >
        <%- '<Button' %>
              loading={isLoading}
              style={{ marginRight: 10 }}
              icon={<i className="iconfont icon-xiazai14" />}
            >
              批量删除
            </Button>
          </Popconfirm>
        )}
      </>
    );
  };
<% } -%>

  return (
    <>
<% if (funcs.includes('search')) { -%>
      <Searchs
        isLoading={isLoading}
        query={query}
        list={searchList}
        isNotSearch={<% if (funcs.includes('search')) { -%>isNotSearchBtn<% } else { -%>true<% } -%>}
        isNotCreate={<% if (funcs.includes('search')) { -%>isNotCreateBtn<% } else { -%>true<% } -%>}
        handleSearch={handleSearch}
<% if (funcs.includes('batchDelete')) { -%>
        addElement={addSearchElement}
<% } -%>
<% if (funcs.includes('create')) { -%>
        handleClickCreate={handleClickCreate}
<% } -%>
      />

<% } -%>
      <Tables
        loading={isLoading}
        data={data}
        isPagination={true}
        columnLists={columnLists}
<% if (funcs.includes('batchDelete')) { -%>
        handleRowSelect={handleRowSelect}
<% } -%>
      >
<% if (funcs.includes('pagination')) { -%>

      <Paginations
        query={query}
        total={total}
        handleChangePage={handleChangePage}
      />
<% } -%>
<% if (funcs.includes('create') || funcs.includes('update')) { -%>

      <Create
        isVisible={isCreate}
        list={createList}
        initFormData={initFormData}
        layout={CreateLayout}
        updateId={updateId}
        isLoading={isCreateLoading}
        handleCloseCreate={handleCloseCreate}
        handleCreateSubmit={handleCreateSubmit}
      />
<% } -%>
    </>
  );
}


export default connect(
  ({
     <%= model %>,
     authorityLogin,
     loading,
   }: {
    <%= model %>: <%= modelInterface %>,
    authorityLogin: IAuthorityLoginState;
    loading: {
      models: Record<string, boolean>,
      effects: Record<string, boolean>;
    }
  }) => (
    {
      status: <%= model %>,
      loginStatus: authorityLogin,
      isLoading: loading.effects['<%= model %>/handleGetPage'],
<% if (funcs.includes('create') || funcs.includes('update')) { -%>
      isCreateLoading: loading.models.<%= model %>
<% } -%>
    }
  ),
)(Page);