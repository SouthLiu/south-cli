import { Reducer } from 'redux'
import { Effect } from 'dva'
import API from './<%=name%>.api'
import { message } from 'antd'

export type <%=modelInterface%> = {
  data: any;
  total: number;
<% if (funcs.includes('create') || funcs.includes('update')) { -%>
  isCreate: boolean;
<% } -%>
<% if (funcs.includes('update')) { -%>
  updateId: string;
<% } -%>
  query: <% if (funcs.includes('pagination')) { %>IQuery<% } else { %>ITreeQuery<% } %>;
  initQuery: <% if (funcs.includes('pagination')) { %>IQuery<% } else { %>ITreeQuery<% } %>;
  initFormData: any;
}

interface IModelType {
  namespace: string;
  state: <%=modelInterface%>;
  effects: {
    handleGetPage: Effect;
    handleSetInitFormData: Effect;
<% if (funcs.includes('create')) { -%>
    handleChangeCreate: Effect;
<% } -%>
<% if (funcs.includes('update')) { -%>
    handleChangeUpdate: Effect;
<% } -%>
<% if (funcs.includes('create')) { -%>
    handleCreate: Effect;
<% } -%>
<% if (funcs.includes('update')) { -%>
    handleUpdate: Effect;
<% } -%>
<% if (funcs.includes('delete')) { -%>
    handleDelete: Effect;
<% } -%>
<% if (funcs.includes('batchDelete')) { -%>
    handleBatchDelete: Effect;
<% } -%>
    handleRefresh: Effect;
  };
  reducers: {
    handleGetPageState: Reducer<<%=modelInterface%>>;
    handleSetInitFormDataState: Reducer<<%=modelInterface%>>;
    handleChangeQuery: Reducer<<%=modelInterface%>>;
<% if (funcs.includes('create')) { -%>
    handleChangeCreateState: Reducer<<%=modelInterface%>>;
<% } -%>
<% if (funcs.includes('update')) { -%>
    handleChangeUpdateState: Reducer<<%=modelInterface%>>;
<% } -%>
  };
}

const Modal: IModelType = {
  namespace: '<%=model%>',
  state: {
<% if (funcs.includes('create') || funcs.includes('update')) { -%>
    isCreate: false,
<% } -%>
<% if (funcs.includes('update')) { -%>
    updateId: '',
<% } -%>
    initFormData: {},
    data: [],
    total: 0,
    initQuery: {
<% if (funcs.includes('pagination')) { -%>
      page: 1,
      pageSize: 20
<% } -%>
    },
    query: {
<% if (funcs.includes('pagination')) { -%>
      page: 1,
      pageSize: 20
<% } -%>
    }
  },
  effects: {
    // 获取接口数据
    *handleGetPage({ payload }, { call, put }) {
      const response = yield call(API.find_page, payload)
      if (response?.code === 200) {
        yield put({
          type: 'handleGetPageState',
          payload: { data: response.data, query: payload }
        })
      }
    },
    // 刷新当前页
    *handleRefresh({ payload }, { call, put, select }) {
      const query = yield select((state: any) => state.<%=model%>.initQuery)
      const response = yield call(API.find_page, query)
      
      if (response?.code === 200) {
        yield put({
          type: 'handleGetPageState',
          payload: { data: response.data, query: payload }
        })
        yield put({
          type: 'handleChangeQuery',
          payload: query
        })
        message.success({ content: '刷新成功!', key: 'refresh' });
      }
    },
    // 更新初始化值
    *handleSetInitFormData({ payload }, { call, put }) {
      yield put({
        type: 'handleSetInitFormDataState',
        payload
      })
    },
<% if (funcs.includes('create') || funcs.includes('update')) { -%>
    // 更改新增弹窗状态
    *handleChangeCreate({ payload }, { call, put }) {
      yield put({
        type: 'handleChangeCreateState',
        payload
      })
    },
<% } -%>
<% if (funcs.includes('update')) { -%>
    // 更改修改弹窗状态
    *handleChangeUpdate({ payload }, { call, put }) {
      const { id, state } = payload
      if (id) {
        const response = yield call(API.find_one, id)
        yield put({
          type: 'handleChangeUpdateState',
          payload: {
            id,
            state,
            data: response.data,
          }
        })
      }
    },
<% } -%>
<% if (funcs.includes('create')) { -%>
    // 处理新增
    *handleCreate({ payload }, { call, put }) {
      const { values, query } = payload
      const response = yield call(API.create, values)
      if (response?.code === 200) {
        message.success(response?.message || '新增成功!')
        const pageResponse = yield call(API.find_page, query)
        yield put({
          type: 'handleGetPageState',
          payload: { data: pageResponse.data, query }
        })
        yield put({
          type: 'handleChangeCreateState',
          payload: {
            id: '',
            state: false
          }
        })
      }
    },
<% } -%>
<% if (funcs.includes('update')) { -%>
    // 处理修改
    *handleUpdate({ payload }, { call, put }) {
      const { id, query, values } = payload
      const response = yield call(API.update, id, values)
      if (response?.code === 200) {
        message.success(response?.message || '编辑成功!')
        const pageResponse = yield call(API.find_page, query)
        yield put({
          type: 'handleGetPageState',
          payload: { data: pageResponse.data, query }
        })
        yield put({
          type: 'handleChangeCreateState',
          payload: {
            id: '',
            state: false
          }
        })
      }
    },
<% } -%>
<% if (funcs.includes('delete')) { -%>
    // 处理删除
    *handleDelete({ payload }, { call, put }) {
      const { id, query } = payload
      const response = yield call(API.del, id)
      if (response?.code === 200) {
        message.success(response?.message || '删除成功!')
        const pageResponse = yield call(API.find_page, query)
        yield put({
          type: 'handleGetPageState',
          payload: { data: pageResponse.data, query }
        })
      }
    },
<% } -%>
<% if (funcs.includes('batchDelete')) { -%>
    // 处理批量删除
    *handleBatchDelete({ payload }, { call, put }) {
      const { ids, query } = payload
      const response = yield call(API.batch_del, ids)
      if (response?.code === 200) {
        message.success(response?.message || '删除成功!')
        const pageResponse = yield call(API.find_page, query)
        yield put({
          type: 'handleGetPageState',
          payload: { data: pageResponse.data, query }
        })
      }
    }
<% } -%>
  },
  reducers: {
    // 返回接口数据
    handleGetPageState(state, { payload }) {
      const _state = JSON.parse(JSON.stringify(state))
      _state.data = payload?.data?.items || []
      _state.total = payload?.data?.total || 0
      _state.query = payload?.query || {}
      
      return {
        ..._state,
        initFormData: {},
      }
    },
    // 处理初始化值
    handleSetInitFormDataState(state, { payload }) {
      const _state = JSON.parse(JSON.stringify(state))
      _state.initFormData = payload || _state.initFormData

      return {
        ..._state,
      }
    },
    // 处理当前搜索条件
    handleChangeQuery(state, { payload }) {
      const _state = JSON.parse(JSON.stringify(state))
      _state.query = payload
      
      return {
        ..._state,
        initFormData: {},
      }
    },
<% if (funcs.includes('create') || funcs.includes('update')) { -%>
    // 更改新增/修改状态
    handleChangeCreateState(state, { payload }) {
      const _state = JSON.parse(JSON.stringify(state))
      _state.isCreate = payload?.state
      _state.updateId = ''

      return {
        ..._state,
        initFormData: {},
      }
    },
<% } -%>
<% if (funcs.includes('update')) { -%>
    // 更改修改状态
    handleChangeUpdateState(state, { payload }) {
      const _state = JSON.parse(JSON.stringify(state))
      _state.initFormData = payload?.data
      _state.updateId = payload?.id
      _state.isCreate = payload?.state

      return {
        ..._state,
      }
    }
<% } -%>
  }
}

export default Modal